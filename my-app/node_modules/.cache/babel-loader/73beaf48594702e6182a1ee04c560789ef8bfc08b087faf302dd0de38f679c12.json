{"ast":null,"code":"var _jsxFileName = \"/workspaces/FoodRecipe/my-app/src/context/AddRecipeContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { Form } from \"antd\";\nimport { createContext, useContext, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { LoadingOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddRecipeContext = /*#__PURE__*/createContext();\nexport const AddRecipeProvider = ({\n  children\n}) => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [form] = Form.useForm();\n  function loadFromLocalStorage(key) {\n    try {\n      const item = localStorage.getItem(key);\n      if (!item) {\n        return [];\n        // throw new Error(\"Item not found in local storage\");\n      }\n      return JSON.parse(item);\n    } catch (error) {\n      console.error(\"Error retrieving item from local storage:\", error);\n    }\n  }\n  function saveToLocalStorage(key, value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(\"Error saving item to local storage:\", error);\n    }\n  }\n  function getAllRecepies() {\n    return loadFromLocalStorage(\"recepies\");\n  }\n  function addRecepie(recepie) {\n    let recepies = getAllRecepies();\n    // recepies.push(recepie);\n    recepies = [...recepies, recepie];\n    saveToLocalStorage(\"recepies\", recepies);\n  }\n  const normFile = e => {\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  };\n\n  // const handleImageChang = (e) => {\n  //   let reader = new FileReader();\n  //   let file = e.target.files[0];\n\n  //   reader.onloadend = () => {\n  //     this.setState({\n  //       file: file,\n  //       setImageUrl: reader.result,\n  //     });\n  //   };\n\n  //   reader.readAsDataURL(file);\n  // };\n\n  const onFinish = e => {\n    const allRecipies = getAllRecepies();\n    const newRecipe = {\n      ...e,\n      id: nanoid(),\n      image: imageUrl\n    }; // Create a single recipe object\n    const updatedRecipes = [...allRecipies, newRecipe];\n    console.log(e);\n    console.log(updatedRecipes);\n    addRecepie(newRecipe); // Pass the single recipe object to addRecepie\n    console.log(updatedRecipes);\n    saveToLocalStorage(\"recepies\", updatedRecipes);\n  };\n  const getBase64 = (img, callback) => {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => callback(reader.result));\n    reader.readAsDataURL(img);\n    console.log(reader.readAsDataURL(img));\n  };\n  const beforeUpload = e => {\n    // import { message } from 'antd';\n\n    // ...\n\n    const beforeUpload = file => {\n      const headers = new Headers();\n      headers.append('Accept-Encoding', 'gzip, deflate, br');\n      const options = {\n        method: 'POST',\n        headers,\n        body: file,\n        mode: 'cors' // Adjust the mode based on your server configuration\n      };\n      const uploadURL = 'https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188';\n      fetch(uploadURL, options).then(response => response.json()).then(data => {\n        // Handle the response from the server if needed\n        console.log(data);\n        message.success(`${file.name} file uploaded successfully`);\n      }).catch(error => {\n        // Handle errors during the upload\n        console.error('Upload failed:', error);\n        message.error(`${file.name} file upload failed.`);\n      });\n\n      // Returning false from beforeUpload will prevent the default upload behavior\n      return false;\n    };\n  };\n  const handleImageChange = e => {\n    if (e.file.status === \"uploading\") {\n      setLoading(true);\n      return;\n    }\n    if (e.file.status === \"done\") {\n      let reader = new FileReader();\n      let file = e.target.files[0];\n      reader.onloadend = () => {\n        this.setState({\n          file: file,\n          setImageUrl: reader.result\n        });\n      };\n    }\n  };\n  const uploadButton = /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\"\n    },\n    children: [loading ? /*#__PURE__*/_jsxDEV(LoadingOutlined, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 18\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(PlusOutlined, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), \" Upload\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 5\n  }, this);\n  return /*#__PURE__*/_jsxDEV(AddRecipeContext.Provider, {\n    value: {\n      saveToLocalStorage,\n      loadFromLocalStorage,\n      getAllRecepies,\n      addRecepie,\n      normFile,\n      onFinish,\n      getBase64,\n      beforeUpload,\n      handleImageChange,\n      uploadButton,\n      form,\n      imageUrl,\n      setImageUrl,\n      loading,\n      setLoading\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n_s(AddRecipeProvider, \"4ql5vKnXFJ3BRrlksEA7K4DzljM=\", false, function () {\n  return [Form.useForm];\n});\n_c = AddRecipeProvider;\nexport const useAddRecipe = () => {\n  _s2();\n  const context = useContext(AddRecipeContext);\n  if (!context) {\n    throw new Error(\"useAddRecipe must be used within a AddRecipeProvider\");\n  }\n  return context;\n};\n_s2(useAddRecipe, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AddRecipeProvider\");","map":{"version":3,"names":["Form","createContext","useContext","useState","nanoid","LoadingOutlined","PlusOutlined","jsxDEV","_jsxDEV","AddRecipeContext","AddRecipeProvider","children","_s","loading","setLoading","imageUrl","setImageUrl","form","useForm","loadFromLocalStorage","key","item","localStorage","getItem","JSON","parse","error","console","saveToLocalStorage","value","setItem","stringify","getAllRecepies","addRecepie","recepie","recepies","normFile","e","Array","isArray","fileList","onFinish","allRecipies","newRecipe","id","image","updatedRecipes","log","getBase64","img","callback","reader","FileReader","addEventListener","result","readAsDataURL","beforeUpload","file","headers","Headers","append","options","method","body","mode","uploadURL","fetch","then","response","json","data","message","success","name","catch","handleImageChange","status","target","files","onloadend","setState","uploadButton","style","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","Provider","_c","useAddRecipe","_s2","context","Error","$RefreshReg$"],"sources":["/workspaces/FoodRecipe/my-app/src/context/AddRecipeContext.jsx"],"sourcesContent":["import { Form } from \"antd\";\nimport { createContext, useContext, useState } from \"react\";\nimport { nanoid } from \"nanoid\";\nimport { LoadingOutlined, PlusOutlined } from \"@ant-design/icons\";\n\nconst AddRecipeContext = createContext();\n\nexport const AddRecipeProvider = ({ children }) => {\n  const [loading, setLoading] = useState(false);\n  const [imageUrl, setImageUrl] = useState(null);\n  const [form] = Form.useForm();\n\n  function loadFromLocalStorage(key) {\n    try {\n      const item = localStorage.getItem(key);\n      if (!item) {\n        return [];\n        // throw new Error(\"Item not found in local storage\");\n      }\n      return JSON.parse(item);\n    } catch (error) {\n      console.error(\"Error retrieving item from local storage:\", error);\n    }\n  }\n\n  function saveToLocalStorage(key, value) {\n    try {\n      localStorage.setItem(key, JSON.stringify(value));\n    } catch (error) {\n      console.error(\"Error saving item to local storage:\", error);\n    }\n  }\n\n  function getAllRecepies() {\n    return loadFromLocalStorage(\"recepies\");\n  }\n\n  function addRecepie(recepie) {\n    let recepies = getAllRecepies();\n    // recepies.push(recepie);\n    recepies = [...recepies, recepie];\n    saveToLocalStorage(\"recepies\", recepies);\n  }\n\n  const normFile = (e) => {\n    if (Array.isArray(e)) {\n      return e;\n    }\n    return e && e.fileList;\n  };\n\n  // const handleImageChang = (e) => {\n  //   let reader = new FileReader();\n  //   let file = e.target.files[0];\n\n  //   reader.onloadend = () => {\n  //     this.setState({\n  //       file: file,\n  //       setImageUrl: reader.result,\n  //     });\n  //   };\n\n  //   reader.readAsDataURL(file);\n  // };\n\n  const onFinish = (e) => {\n    const allRecipies = getAllRecepies();\n    const newRecipe = { ...e, id: nanoid(), image: imageUrl }; // Create a single recipe object\n    const updatedRecipes = [...allRecipies, newRecipe];\n    console.log(e);\n    console.log(updatedRecipes);\n    addRecepie(newRecipe); // Pass the single recipe object to addRecepie\n    console.log(updatedRecipes);\n    saveToLocalStorage(\"recepies\", updatedRecipes);\n  };\n\n  const getBase64 = (img, callback) => {\n    const reader = new FileReader();\n    reader.addEventListener(\"load\", () => callback(reader.result));\n    reader.readAsDataURL(img);\n    console.log(reader.readAsDataURL(img));\n  };\n\n  const beforeUpload = (e) => {\n    // import { message } from 'antd';\n\n// ...\n\nconst beforeUpload = (file) => {\n  const headers = new Headers();\n  headers.append('Accept-Encoding', 'gzip, deflate, br');\n\n  const options = {\n    method: 'POST',\n    headers,\n    body: file,\n    mode: 'cors',  // Adjust the mode based on your server configuration\n  };\n\n  const uploadURL = 'https://run.mocky.io/v3/435e224c-44fb-4773-9faf-380c5e6a2188';\n\n  fetch(uploadURL, options)\n    .then(response => response.json())\n    .then(data => {\n      // Handle the response from the server if needed\n      console.log(data);\n      message.success(`${file.name} file uploaded successfully`);\n    })\n    .catch(error => {\n      // Handle errors during the upload\n      console.error('Upload failed:', error);\n      message.error(`${file.name} file upload failed.`);\n    });\n\n  // Returning false from beforeUpload will prevent the default upload behavior\n  return false;\n};\n\n  }\n\n\n  const handleImageChange = (e) => {\n    if (e.file.status === \"uploading\") {\n      setLoading(true);\n      return;\n    }\n    if (e.file.status === \"done\") {\n      let reader = new FileReader();\n      let file = e.target.files[0];\n\n      reader.onloadend = () => {\n        this.setState({\n          file: file,\n          setImageUrl: reader.result,\n        });\n      };\n    }\n  };\n  const uploadButton = (\n    <div style={{ textAlign: \"center\" }}>\n      {loading ? <LoadingOutlined /> : null}\n      <div>\n        <PlusOutlined /> Upload\n      </div>\n    </div>\n  );\n\n  return (\n    <AddRecipeContext.Provider\n      value={{\n        saveToLocalStorage,\n        loadFromLocalStorage,\n        getAllRecepies,\n        addRecepie,\n        normFile,\n        onFinish,\n        getBase64,\n        beforeUpload,\n        handleImageChange,\n        uploadButton,\n        form,\n        imageUrl,\n        setImageUrl,\n        loading,\n        setLoading,\n      }}\n    >\n      {children}\n    </AddRecipeContext.Provider>\n  );\n};\n\nexport const useAddRecipe = () => {\n  const context = useContext(AddRecipeContext);\n  if (!context) {\n    throw new Error(\"useAddRecipe must be used within a AddRecipeProvider\");\n  }\n  return context;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}